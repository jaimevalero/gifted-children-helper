import streamlit as st
import requests
from fpdf import FPDF
import time
from loguru import logger
import uuid
import os
from gifted_children_helper.main import run
from dotenv import load_dotenv
from streamlit.components.v1 import html

# Load environment variables
load_dotenv()

def mock_google_auth():
    # Mock authentication for demonstration purposes
    logger.info("Mocking Google authentication")
    st.session_state["user_email"] = "user_mock@example.com"
    return st.session_state["user_email"]

def streamlit_callback(message: str, progress: float = None):
    """
    Callback function to update progress in Streamlit.
    
    :param message: Message to display.
    :param progress: Progress percentage (0 to 1).
    """
    logger.info(f"Streamlit callback called with message: {message} and progress: {progress}")
    # Convert markdown to html
    st.markdown(message)
    
    if progress is not None:
        if "progress_bar" not in st.session_state:
            st.session_state.progress_bar = st.progress(0)
        progress = min(1.0, max(0.0, progress))  # Ensure progress is between 0 and 1   
        st.session_state.progress_bar.progress(progress)

def call_crew_ai(case, session_id, callback):
    # Initialize the progress bar before starting tasks
    logger.info("Calling Crew AI with session ID: {}", session_id)
    if "progress_bar" not in st.session_state:
        st.session_state.progress_bar = st.progress(0)
    
    st.write("Generando el informe. Esto tarda varios minutos. Por favor, espere")
    # Aqu√≠ puedes llamar a la funci√≥n de Crew.ai y pasar el callback
    # Ejemplo de uso del callback:


    callback("Iniciando contacto con la ia...", 0.1)
    case = ""
    # Ejecuta el run del modulo gifted_children_helper.main
    pdf_filename = run(case, callback,session_id)

    return pdf_filename




def count_words(*texts):
    # Count the total number of words in the provided texts
    logger.info("Counting words in provided texts")
    return sum(len(text.split()) for text in texts)

def load_terms_and_policy():
    # Load the terms of service and privacy policy from an external file
    logger.info("Loading terms of service and privacy policy")
    terms_file_path = os.path.join(os.path.dirname(__file__), 'static', 'terms_and_policy.md')
    with open(terms_file_path, 'r', encoding='utf-8') as file:
        return file.read()

def add_navbar():
    """
    Add a navigation bar to the Streamlit app.
    """
    logger.info("Adding navigation bar to the app")
    st.markdown("""
<nav class="navbar navbar-light bg-light">
  <span class="navbar-brand mb-0 h1">Gabinete integral de psicolog√≠a</span>
</nav>
    """, unsafe_allow_html=True)

def main():
    # Add the navigation bar
    add_navbar()
    
    # Set the title of the Streamlit app
    logger.info("Starting Streamlit app")

    #st.title("Formulario para Informe Psicol√≥gico")
    st.info("""Esta aplicaci√≥n simula, mediante inteligencia artificial, un gabinete psicol√≥gico especializado en familias con ni√±os/as de altas capacidades.

Por favor, completa el formulario para generar un informe psicol√≥gico.""")
    
    # Load the CSS from the static file
    css_file_path = os.path.join(os.path.dirname(__file__), 'static', 'style.css')
    with open(css_file_path) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

    # Generate a UUID for the session if not already present
    if "session_id" not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())

    # Add text areas for user input with lighter placeholder text
    description = st.text_area("1. Descripci√≥n del Ni√±o/a", placeholder="""
Incluye edad, lugar de residencia, personalidad, y caracter√≠sticas principales.
Ejemplo: 
Juan es un ni√±o de 8 a√±os que vive en Madrid con su hermano Enrique de 11. Es un ni√±o muy curioso, con gran inter√©s por la astronom√≠a y los videojuegos. A menudo hace preguntas complejas sobre el universo y muestra un vocabulario avanzado para su edad.
""")

    family_dynamics = st.text_area("2. Din√°mica Familiar", placeholder="""
Describe c√≥mo interact√∫a con la familia, rutinas en casa, y relaci√≥n con hermanos.
Ejemplo: 
En casa, Juan mantiene una relaci√≥n cercana con su madre, quien lo apoya en sus proyectos escolares. Sin embargo, suele discutir con su hermano Enrique, quien a veces se siente desplazado por la atenci√≥n que recibe Juan debido a sus logros acad√©micos. Los padres tratan de mantener un equilibrio, pero a menudo enfrentan dificultades para atender las necesidades de ambos hijos.
""")

    emotional_behavior = st.text_area("3. Comportamiento y Manejo Emocional", placeholder="""
Explica c√≥mo se comporta en diferentes situaciones y gestiona sus emociones.
Ejemplo: 
Juan suele frustrarse cuando no logra alcanzar la perfecci√≥n en sus proyectos o cuando se siente incomprendido por sus compa√±eros en el colegio. Tiende a aislarse cuando est√° molesto, aunque responde bien a actividades estructuradas como clases de m√∫sica. Su autoestima es alta en lo acad√©mico, pero se muestra inseguro en interacciones sociales.
""")

    skills_development = st.text_area("4. Habilidades y Desarrollo", placeholder="""
Describe las habilidades del ni√±o/a y √°reas de desarrollo (acad√©mico, f√≠sico, creativo, social).
Ejemplo: 
Juan destaca en matem√°ticas y ciencias, resolviendo problemas avanzados para su edad. Ha comenzado a escribir cuentos breves y muestra creatividad en su forma de narrar. Sin embargo, en actividades deportivas se siente menos capaz y evita participar en juegos de equipo, lo que afecta su integraci√≥n social.
""")

    school_context = st.text_area("5. Contexto Escolar y Extraescolar", placeholder="""
Comenta sobre su progreso acad√©mico y actividades fuera de la escuela.
Ejemplo: 
En el colegio, Juan suele aburrirse con tareas repetitivas y ha manifestado inter√©s por proyectos m√°s desafiantes. Participa en un taller de rob√≥tica despu√©s de clases, donde trabaja con estudiantes mayores y disfruta la experiencia. Sus profesores reconocen su talento, pero a veces no saben c√≥mo manejar sus necesidades espec√≠ficas.
""")

    problems_difficulties = st.text_area("6. Problemas y Situaciones Dif√≠ciles", placeholder="""
Indica los problemas principales y cu√°ndo suelen ocurrir.
Ejemplo: 
Juan se siente aislado socialmente, ya que sus compa√±eros lo perciben como "diferente" debido a su forma de expresarse y sus intereses. En casa, las tensiones con su hermano mayor son frecuentes, especialmente en actividades compartidas como juegos de mesa. Su madre se√±ala que Juan tiene dificultades para manejar la frustraci√≥n y aceptar cr√≠ticas constructivas.
""")

    additional_observations = st.text_area("7. Observaciones Adicionales", placeholder="""
A√±ade cualquier otro detalle que consideres importante.
Ejemplo: 
Juan tiene un gran inter√©s por aprender programaci√≥n y ha comenzado a explorar plataformas en l√≠nea. Sus padres est√°n preocupados por su exceso de tiempo frente a pantallas y buscan formas de equilibrar sus actividades tecnol√≥gicas con experiencias al aire libre. Tambi√©n mencionan que Juan muestra inter√©s por participar en programas para ni√±os de altas capacidades.
""")

    # Mock authentication
    email = mock_google_auth()
    #st.sidebar.markdown(f"**Usuario autenticado:** {email}")

    # Count words in all text areas
    total_words = count_words(description, family_dynamics, emotional_behavior, skills_development, school_context, problems_difficulties, additional_observations)
    #st.sidebar.write(f"Total words: {total_words}")

    MINIMUN_WORDS = 200 
    debug_mode = os.getenv("LOCAL") == "1" # Check if LOCAL mode is enabled
    minimun_words = 0 if debug_mode else MINIMUN_WORDS
    words_remaining = minimun_words - total_words

    if words_remaining > 0:
        st.error(f"Por favor, escribe al menos {minimun_words} palabras. Faltan {words_remaining} palabras.")
        send_button_disabled = True
    else:
        send_button_disabled = False

    # Load terms of service and privacy policy
    terms_and_policy = load_terms_and_policy()

    with st.expander("T√©rminos de Servicio y Pol√≠tica de Privacidad"):
        st.markdown(terms_and_policy)

    data_policy_accepted = st.checkbox("Acepto los t√©rminos de servicio.", value=debug_mode)

    # Add footer with link to source code
    footer_html = """<div style='text-align: right;'>
      <p>Desarrollado con ‚ù§Ô∏è para <a href="https://www.asociacionamaci.com/" target="_blank">AMACI</a></p>
    </div>"""

    # Si no se han aceptado los terminos del servicio, no permita enviar el formulario, y poner un st.error
    # Ojo que al principio no debe mostrar el error, solo cuando se intente enviar el formulario
    if not data_policy_accepted:
        st.error("Por favor, acepta los t√©rminos de servicio para continuar.")

    if st.button("Generar informe üìù", disabled=send_button_disabled or not data_policy_accepted):
        # Initialize the case variable
        case = ""

        # Append each section if the associated text is not empty
        if description:
            case += f"**Descripci√≥n del Ni√±o/a:** {description}\n"
        if family_dynamics:
            case += f"**Din√°mica Familiar:** {family_dynamics}\n"
        if emotional_behavior:
            case += f"**Comportamiento y Manejo Emocional:** {emotional_behavior}\n"
        if skills_development:
            case += f"**Habilidades y Desarrollo:** {skills_development}\n"
        if school_context:
            case += f"**Contexto Escolar y Extraescolar:** {school_context}\n"
        if problems_difficulties:
            case += f"**Problemas y Situaciones Dif√≠ciles:** {problems_difficulties}\n"
        if additional_observations:
            case += f"**Observaciones Adicionales:** {additional_observations}\n"
        
        pdf_filename = call_crew_ai(case, st.session_state.session_id, streamlit_callback)
        
        # Set progress to 100% after completion
        streamlit_callback("Informe generado con √©xito.", 1.0)

        # Ensure the file is only accessible to the current user
        if os.path.exists(pdf_filename):
            with open(pdf_filename, "rb") as file:
                st.download_button(
                    label="Descargar informe üì•",  # Added download icon
                    data=file,
                    file_name="informe_final.pdf",  # Specify the desired download name
                    mime="application/pdf"
                )
            
            
    # Log the current app mode
    logger.info("Current app mode: Generar Informe")


    st.markdown(footer_html, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
